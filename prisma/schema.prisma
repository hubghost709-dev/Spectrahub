generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String             @id @default(uuid())
  username          String             @unique
  imageUrl          String
  externalUserId    String             @unique
  bio               String?
  tokens            Int                @default(0)
  isVerifiedModel   Boolean            @default(false)
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  blockedBy         Block[]            @relation("BlockedBy")
  blocking          Block[]            @relation("Blocking")
  following         Follow[]           @relation("Following")
  follower          Follow[]           @relation("Follower")
  kingOfRooms       KingOfRoom[]
  modelVerification ModelVerification?
  redemptions       Redemption[]
  stream            Stream?
  receivedTips      Tip[]              @relation("ReceivedTips")
  sentTips          Tip[]              @relation("SentTips")
  tipMenuItems      TipMenuItem[]
  goals             TokenGoal[]
}

model Stream {
  id                  String      @id @default(uuid())
  name                String
  thumbnailUrl        String?
  ingressId           String?     @unique
  serverUrl           String?
  streamKey           String?
  pinnedMessage       String?     @default("")
  streamTopic         String?     @default("")
  kingTokens          Int         @default(100)
  blockedCountries    String[]    @default([])
  isLive              Boolean     @default(false)
  isChatEnabled       Boolean     @default(true)
  isChatDelayed       Boolean     @default(true)
  isChatFollowersOnly Boolean     @default(true)
  userId              String      @unique
  createdAt           DateTime    @default(now())
  updatedAt           DateTime    @updatedAt
  kingOfRoom          KingOfRoom?
  user                User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  tips                Tip[]

  @@index([userId])
  @@index([ingressId])
}

model Tip {
  id          String   @id @default(uuid())
  amount      Int
  streamId    String
  senderId    String
  recipientId String
  createdAt   DateTime @default(now())
  recipient   User     @relation("ReceivedTips", fields: [recipientId], references: [id], onDelete: Cascade)
  sender      User     @relation("SentTips", fields: [senderId], references: [id], onDelete: Cascade)
  stream      Stream   @relation(fields: [streamId], references: [id], onDelete: Cascade)

  @@index([streamId])
  @@index([senderId])
  @@index([recipientId])
}

model Follow {
  id          String   @id @default(uuid())
  followerId  String
  followingId String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  follower    User     @relation("Following", fields: [followerId], references: [id], onDelete: Cascade)
  following   User     @relation("Follower", fields: [followingId], references: [id], onDelete: Cascade)

  @@unique([followerId, followingId])
  @@index([followerId])
  @@index([followingId])
}

model Block {
  id        String   @id @default(uuid())
  blockerId String
  blockedId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  blocked   User     @relation("BlockedBy", fields: [blockedId], references: [id], onDelete: Cascade)
  blocker   User     @relation("Blocking", fields: [blockerId], references: [id], onDelete: Cascade)

  @@unique([blockerId, blockedId])
  @@index([blockerId])
  @@index([blockedId])
}

model KingOfRoom {
  id          String   @id @default(uuid())
  streamId    String   @unique
  userId      String
  totalTokens Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  stream      Stream   @relation(fields: [streamId], references: [id], onDelete: Cascade)
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([streamId])
  @@index([userId])
}

model ModelVerification {
  id           String             @id @default(uuid())
  userId       String             @unique
  fullName     String
  birthDate    DateTime
  idFrontImage String
  idBackImage  String
  selfieImage  String
  status       VerificationStatus @default(PENDING)
  createdAt    DateTime           @default(now())
  updatedAt    DateTime           @updatedAt
  user         User               @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model Redemption {
  id             String           @id @default(uuid())
  userId         String
  tokensRedeemed Int
  usdAmount      Float
  paypalEmail    String
  status         RedemptionStatus @default(PENDING)
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  user           User             @relation(fields: [userId], references: [id])

  @@index([userId])
}

model TokenGoal {
  id            String   @id @default(uuid())
  name          String
  targetAmount  Int
  currentAmount Int      @default(0)
  isActive      Boolean  @default(true)
  isCompleted   Boolean  @default(false)
  theme         String   @default("default")
  color         String   @default("#1010f2")
  userId        String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model TipMenuItem {
  id          String   @id @default(uuid())
  name        String
  description String?
  tokens      Int
  isActive    Boolean  @default(true)
  userId      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

enum VerificationStatus {
  PENDING
  APPROVED
  REJECTED
}

enum RedemptionStatus {
  PENDING
  COMPLETED
  FAILED
}
